

## Steps taken with AI
- Created data models and a Flask endpoint.
- Retrieved market data from Yahoo Finance.
- Implemented the core calculation.
- Code Review with CodeRabbit
- Helped with tests.

## My contributions
- Design the various components.
- Connect the components.
- Integrate several AI bots' responses into a single, readable, and efficient solution.
- Refactor the code.
- Ensure everything works.

## For scaling
- Use different binaries for yahoo client and the prediction service
- Containerize and add kubernetes for autoscaling managment
- Put the above services in different pods so they could scale seperately
- Add in memory caching and distibuted caching (like redis) to s&p 500 and requested stocks
- Add database for past queries. I would use mongo because of its dynamic nature. It can store json like data which is very dynamic.
- Add queueing for long running predictions
- Use FastAPI for async operations.
- Propagating exceptions to the API layer will be replaced by dedicated Class instead, 
  and the api will be in charge of logic of the type of request (such as Bad Request)

## Notes
    I did not test the logic of the prediction because it was not a production ready prediction.